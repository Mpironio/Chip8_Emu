#include <string>

typedef unsigned char BYTE;
typedef unsigned short WORD;

class chip8 {
    public:
        void initialize();
        void loadGame(std::string game_name);
        void emulateCycle();

       
    private:
        WORD _opcode; //chip8 has 2byte opcodes
        BYTE _memory[4096]; //4kb memory
        BYTE _regs[16]; //16 registers, 15 8-bit general purpose, 1 for carry flag
        WORD _I;
        WORD _pc;
        WORD _stack[16];
        WORD _sp;
        BYTE _graphics[64*32];
        BYTE _delayTimer;
        BYTE _soundTimer;
        BYTE _key[16];
        BYTE _chip8Fontset[80] =
        { 
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
        };
            

};

/*
    Chip8 Memory Map

    0x000-0x1FF: In the original hardware, the first 512 bytes are occupied by the Chip-8 interpreter.
    0x200: Programs usually start here
    0xEA0-0xEFF: Reserved for callstack and other stuff
    0xF00-0xFFF: Reserved for display refresh

*/